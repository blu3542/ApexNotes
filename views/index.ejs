<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Notes App</title>
  <link rel="stylesheet" href="/css/output.css">
</head>
<body class="bg-black">


    <h1 class="mt-4 text-2xl font-bold text-center text-blue-600">Apex Notes</h1>
    <p class="text-center text-7xl mt-20 text-white">Don't make tutoring harder than it needs to be</p>
    <p class="text-center text-2xl mt-20 text-white">We help create lesson summaries and homework problems for your student as easy as taking a photo</p>
    <button class = "mt-2 rounded-4xl bg-white block mx-auto p-2 " >Try it out</button>

    <div class="mt-10 w-[1200px] h-[600px] card-wrapper relative block mx-auto rounded-2xl overflow-hidden bg-white group"> 
        <div class="card-content absolute top-[4px] left-[4px] w-[1192px] h-[592px] rounded-2xl bg-gradient-to-b from-blue-600 to-blue-700">
          <h2 class="text-center text-white text-5xl translate-y-[200px] group-hover:translate-y-10 transition-all duration-500 ease-in-out">Our Mission</h2>
          <h2 class="text-center text-white text-2xl mt-4 translate-y-[200px] group-hover:opacity-0 group-hover:translate-y-10 transition-transition-all duration-500 ease-in-out">Hover on Me!</h2>

          <p class="opacity-0 mt-8 text-center text-white group-hover:opacity-100 transition-all duration-500 ease-in-out">Deliver summarized notes and practice problems as simple as possible</p>
          <p class="opacity-0 mt-8 text-center text-white group-hover:opacity-100 transition-all duration-500 ease-in-out">Notes we take in class aren't perfect. They're rushed, 
          our messy handwriting or typos make them hard to read after, and seeing the bigger picture behind the notes is difficult to see. 
          To make this process easier, Apex Notes takes your pictures, processes them with Computer Vision and AI models, and voila: 
          A summary of key concepts and practice problems to engrain them into your student's mind is generated</p>
        </div>
    </div>
      
        
    


    <!-- replace hidden with flex -->
    <form class="flex flex-col justify-center items-center text-white" id = "uploadForm" action="/upload" method = "POST" enctype = "multipart/form-data">
        <label class="mt-4"id = "custom-file-upload" for="fileInput">Upload files:</label>
        <input type="file" id="fileInput" name = "files" multiple>
        <button class="mt-4 border-2 border-blue-600 border-solid rounded-md bg-white text-black"  id="submit-button" type="submit">Submit</button>
    </form>





    <div id="result" class="mt-40 text-2xl text-center text-white"></div>

   

  



  <!--Script for ajax-->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const form = document.getElementById('uploadForm');
      form.addEventListener('submit', async (event) => {
        event.preventDefault();
        const formData = new FormData(form);
  
        // Sending the request
        try {
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData
          });
  
          if (!response.ok) {
            throw new Error('Network response had an error');
          }
  
          const resultText = await response.text();
          paginateResults(resultText);
          //document.getElementById('result').innerText = resultText;
        } catch (error) {
          console.error('Error during form submission:', error);
          document.getElementById('result').innerText = 'Error processing your file.';
        }
      });
    });

    function paginateResults(text) {
    // Pages = # paragraphs / pageSize
    const paragraphs = text.split('\n').filter(line => line.trim() !== '');
    const pageSize = 5; // Number of paragraphs per page
    let currentPage = 1;
    const totalPages = Math.ceil(paragraphs.length / pageSize);
  
    // Create or update pagination controls if not already present
    let paginationContainer = document.getElementById('pagination');
    if (!paginationContainer) {
      paginationContainer = document.createElement('div');
      paginationContainer.id = 'pagination';
      paginationContainer.className = 'mt-4 text-center';
      document.body.appendChild(paginationContainer);
    }
  
    // Set up pagination buttons and page info HTML
    paginationContainer.innerHTML = `
      <button id="prevBtn" class="px-4 py-2 bg-gray-700 text-white rounded">Prev</button>
      <span id="pageInfo" class="mx-4 text-white"></span>
      <button id="nextBtn" class="px-4 py-2 bg-gray-700 text-white rounded">Next</button>
    `;
  
    const resultDiv = document.getElementById('result');
  
    // Function to display a specific page of results
    function displayPage(page) {
      const startIndex = (page - 1) * pageSize;
      const endIndex = startIndex + pageSize;
      const pageItems = paragraphs.slice(startIndex, endIndex);
      resultDiv.innerHTML = pageItems.map(p => `<p>${p}</p>`).join('');
      document.getElementById('pageInfo').innerText = `Page ${page} of ${totalPages}`;
      document.getElementById('prevBtn').disabled = page === 1;
      document.getElementById('nextBtn').disabled = page === totalPages;
    }
  
    // Set up button click handlers
    document.getElementById('prevBtn').addEventListener('click', function() {
      if (currentPage > 1) {
        currentPage--;
        displayPage(currentPage);
      }
    });
  
    document.getElementById('nextBtn').addEventListener('click', function() {
      if (currentPage < totalPages) {
        currentPage++;
        displayPage(currentPage);
      }
    });
  
    // Display the first page initially
    displayPage(currentPage);
  }
  </script>
  

</body>
</html>
